package com.example.user.popularmoviesapp.activities;import android.content.ContentValues;import android.content.Intent;import android.database.Cursor;import android.os.AsyncTask;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.design.widget.CollapsingToolbarLayout;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v4.app.ShareCompat;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.DefaultItemAnimator;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.ImageView;import android.widget.RatingBar;import android.widget.TextView;import com.example.user.popularmoviesapp.Helper.Constants;import com.example.user.popularmoviesapp.R;import com.example.user.popularmoviesapp.adapters.ReviewsAdapter;import com.example.user.popularmoviesapp.adapters.TrailersAdapter;import com.example.user.popularmoviesapp.database.MovieContract.MoviesEntry;import com.example.user.popularmoviesapp.model.MovieReviewResults;import com.example.user.popularmoviesapp.model.MovieReviews;import com.example.user.popularmoviesapp.model.MovieVideoResults;import com.example.user.popularmoviesapp.model.MovieVideos;import com.example.user.popularmoviesapp.model.Movies;import com.example.user.popularmoviesapp.network.TmdbRestClient;import com.squareup.picasso.Picasso;import java.text.DecimalFormat;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class DetailsActivity extends AppCompatActivity {    private final String BACKDROP_IMAGE_URL = "http://image.tmdb.org/t/p/w500";    private final String POSTER_IMAGE_URL = "http://image.tmdb.org/t/p/w185";    @BindView(R.id.details_collapsing_toolbar)    CollapsingToolbarLayout collapsingToolbarLayout;    @BindView(R.id.details_ct_back_drop)    ImageView backDropImage;    @BindView(R.id.details_cv_movie_image)    ImageView thumbnailImage;    @BindView(R.id.details_tv_title)    TextView detailsTitle;    @BindView(R.id.details_tv_release_date)    TextView detailsReleaseDate;    @BindView(R.id.details_tv_duration)    TextView detailsDuration;    @BindView(R.id.details_tv_ratings)    TextView detailsRating;    @BindView(R.id.details_tv_overview)    TextView detailsOverview;    @BindView(R.id.details_rv_videos)    RecyclerView trailersRecyclerView;    @BindView(R.id.reviews_recycler_view)    RecyclerView reviewsRecyclerView;    @BindView(R.id.details_rating_bar)    RatingBar ratingBar;    @BindView(R.id.reviews_empty_text)    TextView reviewsEmptyText;    @BindView(R.id.empty_trailers_tv)    TextView trailersTextView;    @BindView(R.id.details_fab_favorites)    FloatingActionButton fabFavorites;    private Boolean isFavorites = false;    private View viewFab;    private int movie_id;    Movies movie;    private TrailersAdapter trailersAdapter;    private List<MovieVideoResults> trailersList;    private static final String TAG = TrailersAdapter.class.getSimpleName();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.details_activity);        ButterKnife.bind(this);        Toolbar toolbar  = (Toolbar) findViewById(R.id.details_toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this,                LinearLayoutManager.HORIZONTAL,                false);        trailersRecyclerView.setLayoutManager(linearLayoutManager);        if(getIntent() != null)        {            if(getIntent().hasExtra(Constants.MOVIE_INTENT_ID))            {                    movie = getIntent().getParcelableExtra(Constants.MOVIE_INTENT_ID);                    movie_id = movie.getId();                Log.d(TAG,"The selected movie_id is " +movie_id);            }        }        loadMovieDetails();        loadMovieReviews();        loadMoviesTrailers();    }    /*Network Call to get the Movie Details*/    private void loadMovieDetails()    {        Call<Movies> moviesCall = TmdbRestClient.getInstance()                .getMovieDetailsResponse()                .getMovieDetails(movie_id);        moviesCall.enqueue(new Callback<Movies>() {            @Override            public void onResponse( Call<Movies> call,  Response<Movies> response) {                Movies moviesList = response.body();                collapsingToolbarLayout.setTitle(moviesList.getTitle());                Picasso.with(getApplicationContext())                        .load(BACKDROP_IMAGE_URL + moviesList.getBackdropPath())                        .error(R.drawable.no_movie_image)                        .placeholder(R.drawable.load)                        .into(backDropImage);                Picasso.with(getApplicationContext())                        .load(POSTER_IMAGE_URL + moviesList.getPosterPath())                        .error(R.drawable.no_movie_image)                        .placeholder(R.drawable.load)                        .into(thumbnailImage);                detailsTitle.setText(moviesList.getOriginalTitle());                detailsReleaseDate.setText(moviesList.getReleaseDate());                String runTime = Integer.toString(moviesList.getRuntime()) + " minutes ";                detailsDuration.setText(runTime);                detailsRating.setText(String.valueOf(moviesList.getVoteAverage()));                DecimalFormat decimalFormat = new DecimalFormat("#0.00");                Double voteAverage = moviesList.getVoteAverage();                Log.d(TAG,voteAverage.toString());                ratingBar.setRating(Float.parseFloat(decimalFormat.format(voteAverage)));                detailsOverview.setText(moviesList.getOverview());            }            @Override            public void onFailure(@NonNull Call<Movies> call, @NonNull Throwable t) {                Log.e(TAG,t.getMessage());            }        });    }    /*Network call to get the Movie Trailers List*/    private void loadMoviesTrailers()    {        Call<MovieVideos> videosCall = TmdbRestClient.getInstance()                .getMovieDetailVideosResponse()                .getMovieVideos(movie_id);        videosCall.enqueue(new Callback<MovieVideos>() {            @Override            public void onResponse(@NonNull Call<MovieVideos> call, @NonNull Response<MovieVideos> response) {                trailersList = response.body().getResults();                if(trailersList.isEmpty())                {                    trailersTextView.setText(getResources().getString(R.string.empty_trailers_text));                }else {                    trailersRecyclerView.setAdapter(new TrailersAdapter(trailersList, getApplicationContext()));                    trailersRecyclerView.smoothScrollToPosition(0);                    trailersRecyclerView.setItemAnimator(new DefaultItemAnimator());                }            }            @Override            public void onFailure(Call<MovieVideos> call, Throwable t) {                Log.e(TAG,t.getMessage());            }        });        fabFavorites.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                new FavoriteImageToggler().execute();                new FavoriteTask(v).execute();            }        });    }    /*Network call to get the Movie Reviews List*/    private void loadMovieReviews()    {       Call<MovieReviews> reviewsCall = TmdbRestClient.getInstance()               .getMovieDetailReviewsResponse()               .getMovieReviews(movie_id);        reviewsCall.enqueue(new Callback<MovieReviews>() {            @Override            public void onResponse(@NonNull Call<MovieReviews> call, @NonNull Response<MovieReviews> response) {                List<MovieReviewResults> reviews = response.body().getResults();                if(reviews.isEmpty())                {                    reviewsEmptyText.setText(getResources().getString(R.string.empty_reviews));                }else {                    reviewsRecyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext()));                    reviewsRecyclerView.setAdapter(new ReviewsAdapter(getApplicationContext(), reviews));                    reviewsRecyclerView.smoothScrollToPosition(0);                    reviewsRecyclerView.setItemAnimator(new DefaultItemAnimator());                }            }            @Override            public void onFailure(Call<MovieReviews> call, Throwable t) {                Log.d(TAG,t.getMessage());            }        });    }    /*Try using this in context with the toolbar.setMenuItem*/    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.details,menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if(id == android.R.id.home )        {            onBackPressed();            return true;        }        else if (id == R.id.menu_share)        {            ShareCompat.IntentBuilder intentBuilder = ShareCompat.IntentBuilder.from(this);            Intent sharingIntent = intentBuilder                    .setType("text/plain")                    .setText(Constants.YOUTUBE_URL_BROWSER + trailersList.get(0).getKey())                    .setChooserTitle(getResources().getString(R.string.share_title))                    .createChooserIntent();            if(sharingIntent.resolveActivity(getPackageManager()) != null )            {                startActivity(sharingIntent);            }        }        return super.onOptionsItemSelected(item);    }    private ContentValues addContentValues(){        ContentValues cv = new ContentValues();        cv.put(MoviesEntry.COLUMN_MOVIE_ID,movie.getId());        cv.put(MoviesEntry.COLUMN_MOVIE_TITLE,movie.getTitle());        cv.put(MoviesEntry.COLUMN_MOVIE_DURATION,movie.getRuntime());        cv.put(MoviesEntry.COLUMN_MOVIE_BACKDROP,movie.getBackdropPath());        cv.put(MoviesEntry.COLUMN_MOVIE_POSTER,movie.getPosterPath());        cv.put(MoviesEntry.COLUMN_MOVIE_USER_RATING,movie.getVoteAverage());        cv.put(MoviesEntry.COLUMN_MOVIE_RELEASE_DATE,movie.getReleaseDate());        return cv;    }    /*The AsyncTask for insertion or deletion into the Database*/    private class FavoriteTask extends AsyncTask<Void,Void,Boolean>    {        private  View view;        public FavoriteTask(View view)        {            this.view = view;        }        boolean isSuccessful;        @Override        protected Boolean doInBackground(Void... params) {            if(isFavorites)            {                isSuccessful = getContentResolver().delete(MoviesEntry.CONTENT_URI,                        MoviesEntry.COLUMN_MOVIE_ID,                        new String[]{String.valueOf(MoviesEntry.COLUMN_MOVIE_ID)} )                        == 1;            }else            {                isSuccessful = getContentResolver()                        .insert(MoviesEntry.CONTENT_URI,addContentValues()) != null;            }            return isSuccessful;        }        @Override        protected void onPostExecute(Boolean isSuccessful) {            super.onPostExecute(isSuccessful);            if(!isSuccessful)            {                showSnackBar(viewFab,getResources().getString(R.string.operation_failed));                return;            }            isFavorites = !isFavorites;            if(isFavorites)            {                fabFavorites.setImageResource(R.drawable.ic_favorite_border);                showSnackBar(view,getResources().getString(R.string.movies_added));            }else            {                fabFavorites.setImageResource(R.drawable.favorite_heart_button);                showSnackBar(view,getResources().getString(R.string.movies_removed));            }        }    }    /*The AsyncTask to Check the Movie is a favorite*/    /*@return - isFavourite*/    private class FavoriteImageToggler extends AsyncTask<Void,Void,Boolean>    {        @Override        protected Boolean doInBackground(Void... params) {            Cursor cursor =  getContentResolver().query(                    MoviesEntry.CONTENT_URI,                    new String[]{MoviesEntry.COLUMN_MOVIE_ID},                    MoviesEntry.COLUMN_MOVIE_ID +" = ?",                    new String[]{ String.valueOf(movie.getId()) },                    null);            boolean ifExists = cursor != null && cursor.getCount() ==1;            if(cursor != null)            {                cursor.close();            }            return ifExists;        }        @Override        protected void onPostExecute(Boolean ifExists) {            super.onPostExecute(ifExists);            if(ifExists){                fabFavorites.setImageResource(R.drawable.favorite_heart_button);            }else{                fabFavorites.setImageResource(R.drawable.ic_favorite_border);            }            isFavorites = ifExists;        }    }    private void showSnackBar(View v,String summary)    {        Snackbar.make(v , summary ,Snackbar.LENGTH_LONG).show();    }}